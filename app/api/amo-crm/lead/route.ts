import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { name, phone, email, service, message } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!name || !phone) {
      return NextResponse.json(
        { error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    const newLead = {
      id: Date.now().toString(),
      name: name,
      phone: phone,
      email: email || '',
      service: service || '',
      message: message || '',
      status: 'new' as const,
      createdAt: new Date().toISOString()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω–∫—É —á–µ—Ä–µ–∑ API
    try {
      await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/admin/leads`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newLead)
      });
    } catch (error) {
      console.error('Error adding lead to admin:', error);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      try {
        const message = `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\nüë§ ${newLead.name}\nüìû ${newLead.phone}\n${newLead.email ? `üìß ${newLead.email}\n` : ''}${newLead.service ? `üîß ${newLead.service}\n` : ''}${newLead.message ? `üí¨ ${newLead.message}\n` : ''}\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
        
        await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: process.env.TELEGRAM_CHAT_ID,
            text: message,
            parse_mode: 'HTML'
          })
        });
      } catch (error) {
        console.error('Telegram notification error:', error);
      }
    }

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å amoCRM API
    console.log('Lead data for amoCRM:', {
      name,
      phone,
      email,
      service,
      message,
      timestamp: new Date().toISOString(),
      source: 'website'
    });

    // –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å amoCRM (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const amoCRMData = {
      name: name,
      phone: phone,
      email: email || '',
      custom_fields: {
        service: service || '',
        message: message || '',
        source: 'website',
        timestamp: new Date().toISOString()
      }
    };

    // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ amoCRM API
    // const response = await fetch('https://your-domain.amocrm.ru/api/v4/leads', {
    //   method: 'POST',
    //   headers: {
    //     'Authorization': `Bearer ${process.env.AMOCRM_ACCESS_TOKEN}`,
    //     'Content-Type': 'application/json',
    //   },
    //   body: JSON.stringify(amoCRMData)
    // });

    // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json(
      { 
        success: true, 
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
        leadId: newLead.id
      },
      { status: 200 }
    );

  } catch (error) {
    console.error('Error processing lead:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
} 