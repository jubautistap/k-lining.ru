import { NextRequest, NextResponse } from 'next/server';
import { requireManager } from '@/lib/auth/middleware';

export async function POST(request: NextRequest) {
  try {
    // –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã/–∞–¥–º–∏–Ω—ã
    const auth = await requireManager(request);
    if (auth) return auth;

    let body: any = {};
    try {
      body = await request.json();
    } catch {}

    const botToken = body?.botToken || process.env.TELEGRAM_BOT_TOKEN;
    const chatId = body?.chatId || process.env.TELEGRAM_CHAT_ID;

    if (!botToken || !chatId) {
      return NextResponse.json(
        { error: 'botToken –∏ chatId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã (–∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏)' },
        { status: 400 }
      );
    }

    const message = `üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n‚è∞ ${new Date().toLocaleString('ru-RU')}\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.`;

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });

    if (!response.ok) {
      let errorData: any = {};
      try { errorData = await response.json(); } catch {}
      return NextResponse.json(
        { error: `–û—à–∏–±–∫–∞ Telegram API: ${errorData.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` },
        { status: 400 }
      );
    }

    return NextResponse.json({ 
      success: true, 
      message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' 
    });

  } catch (error) {
    console.error('Telegram test error:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
} 