import { NextRequest, NextResponse } from 'next/server';
import { leads, addLead } from './data';

export async function GET() {
  return NextResponse.json({ leads });
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!body.name || !body.phone) {
      return NextResponse.json(
        { error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    const newLead = {
      id: Date.now().toString(),
      name: body.name,
      phone: body.phone,
      email: body.email || '',
      service: body.service || '',
      message: body.message || '',
      status: 'new',
      createdAt: new Date().toISOString()
    };

    leads.unshift(newLead); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_CHAT_ID) {
      try {
        const message = `üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\nüë§ ${newLead.name}\nüìû ${newLead.phone}\n${newLead.email ? `üìß ${newLead.email}\n` : ''}${newLead.service ? `üîß ${newLead.service}\n` : ''}${newLead.message ? `üí¨ ${newLead.message}\n` : ''}\n‚è∞ ${new Date().toLocaleString('ru-RU')}`;
        
        await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: process.env.TELEGRAM_CHAT_ID,
            text: message,
            parse_mode: 'HTML'
          })
        });
      } catch (error) {
        console.error('Telegram notification error:', error);
      }
    }

    return NextResponse.json({ 
      success: true, 
      lead: newLead 
    });

  } catch (error) {
    console.error('Error creating lead:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
} 