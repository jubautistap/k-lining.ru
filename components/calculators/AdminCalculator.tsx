'use client';

import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { motion } from 'framer-motion';
import { 
  Calculator, 
  Home, 
  Building, 
  Sparkles, 
  Shield, 
  CheckCircle, 
  Star,
  Users,
  DollarSign,
  TrendingUp,
  AlertCircle,
  Info,
  Save,
  Download
} from 'lucide-react';

interface CalculationResult {
  basePrice: number;
  additionalServices: number;
  commercialServices: number;
  totalPrice: number;
  duration: string;
  services: string[];
  team: {
    employeesCount: number;
    totalHours: number;
    regularHours: number;
    overtimeHours: number;
    costPerEmployee: number;
    totalLaborCost: number;
  };
  costs: {
    labor: number;
    materials: number;
    transport: number;
    overhead: number;
    profit: number;
    totalCost: number;
  };
  margins: {
    grossMargin: number;
    netMargin: number;
    marginPercentage: number;
  };
  pricing: {
    pricePerSqm: number;
    pricePerHour: number;
    pricePerService: number;
  };
}

interface Employee {
  id: string;
  name: string;
  hourlyRate: number;
  efficiency: number; // –º¬≤/—á–∞—Å
  type: 'freelance' | 'staff'; // —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä –∏–ª–∏ —à—Ç–∞—Ç–Ω—ã–π
  maxHoursPerDay?: number; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —á–∞—Å—ã –≤ –¥–µ–Ω—å
  overtimeRate?: number; // —Å—Ç–∞–≤–∫–∞ –∑–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ
}

interface Material {
  id: string;
  name: string;
  costPerSqm: number;
  usage: number; // % –æ—Ç –ø–ª–æ—â–∞–¥–∏
}

interface Preset {
  id: string;
  name: string;
  propertyType: 'apartment' | 'house' | 'office' | 'commercial';
  cleaningType: 'maintenance' | 'general' | 'postRenovation' | 'eco' | 'vip';
  area: number;
  distance: number;
  employeeId: string;
  additionalServices: string[];
  commercialServices: string[];
  specialModes: string[];
}

export default function AdminCalculator() {
  const [propertyType, setPropertyType] = useState<'apartment' | 'house' | 'office' | 'commercial'>('apartment');
  const [area, setArea] = useState<number>(50);
  const [customArea, setCustomArea] = useState<string>('');
  const [cleaningType, setCleaningType] = useState<'maintenance' | 'general' | 'postRenovation' | 'eco' | 'vip'>('maintenance');
  const [additionalServices, setAdditionalServices] = useState<string[]>([]);
  const [commercialServices, setCommercialServices] = useState<string[]>([]);
  const [specialModes, setSpecialModes] = useState<string[]>([]);
  const [distance, setDistance] = useState<number>(10); // –∫–º
  const [employees, setEmployees] = useState<Employee[]>([
    { 
      id: '1', 
      name: '–£–±–æ—Ä—â–∏—Ü–∞ (—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä)', 
      hourlyRate: 300, 
      efficiency: 20,
      type: 'freelance'
    },
    { 
      id: '2', 
      name: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç (—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä)', 
      hourlyRate: 400, 
      efficiency: 15,
      type: 'freelance'
    },
    { 
      id: '3', 
      name: '–ú–∞—Å—Ç–µ—Ä (—à—Ç–∞—Ç–Ω—ã–π)', 
      hourlyRate: 500, 
      efficiency: 12,
      type: 'staff',
      maxHoursPerDay: 8,
      overtimeRate: 750
    },
    { 
      id: '4', 
      name: '–£–±–æ—Ä—â–∏—Ü–∞ (—à—Ç–∞—Ç–Ω–∞—è)', 
      hourlyRate: 250, 
      efficiency: 18,
      type: 'staff',
      maxHoursPerDay: 8,
      overtimeRate: 375
    }
  ]);
  const [selectedEmployee, setSelectedEmployee] = useState<string>('1');
  const [result, setResult] = useState<CalculationResult | null>(null);
  const [presets, setPresets] = useState<Preset[]>([
    {
      id: '1',
      name: '–ö–≤–∞—Ä—Ç–∏—Ä–∞ 50–º¬≤ - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è',
      propertyType: 'apartment',
      cleaningType: 'maintenance',
      area: 50,
      distance: 10,
      employeeId: '1',
      additionalServices: [],
      commercialServices: [],
      specialModes: []
    },
    {
      id: '2',
      name: '–î–æ–º 150–º¬≤ - –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è',
      propertyType: 'house',
      cleaningType: 'general',
      area: 150,
      distance: 15,
      employeeId: '2',
      additionalServices: ['windows', 'kitchen'],
      commercialServices: [],
      specialModes: []
    },
    {
      id: '3',
      name: '–û—Ñ–∏—Å 200–º¬≤ - –ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞',
      propertyType: 'office',
      cleaningType: 'postRenovation',
      area: 200,
      distance: 20,
      employeeId: '3',
      additionalServices: ['disinfection'],
      commercialServices: ['office_cleaning'],
      specialModes: ['express']
    }
  ]);
  const [showPresetModal, setShowPresetModal] = useState(false);
  const [newPresetName, setNewPresetName] = useState('');

  // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –∑–∞ –º¬≤ (–∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ)
  const basePrices = useMemo(() => ({
    apartment: {
      maintenance: 60,
      general: 100,
      postRenovation: 140,
      eco: 120,
      vip: 200
    },
    house: {
      maintenance: 120,
      general: 200,
      postRenovation: 280,
      eco: 240,
      vip: 400
    },
    office: {
      maintenance: 80,
      general: 140,
      postRenovation: 200,
      eco: 160,
      vip: 300
    },
    commercial: {
      maintenance: 70,
      general: 120,
      postRenovation: 180,
      eco: 140,
      vip: 250
    }
  }), []);

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
  const additionalServicesList = useMemo(() => [
    { id: 'windows', name: '–ú—ã—Ç—å–µ –æ–∫–æ–Ω', price: 600, materials: 50 },
    { id: 'sofa', name: '–•–∏–º—á–∏—Å—Ç–∫–∞ –¥–∏–≤–∞–Ω–∞', price: 3000, materials: 800 },
    { id: 'carpet', name: '–•–∏–º—á–∏—Å—Ç–∫–∞ –∫–æ–≤—Ä–∞', price: 1800, materials: 400 },
    { id: 'balcony', name: '–£–±–æ—Ä–∫–∞ –±–∞–ª–∫–æ–Ω–∞', price: 1200, materials: 100 },
    { id: 'fridge', name: '–ú—ã—Ç—å–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞', price: 1000, materials: 150 },
    { id: 'wardrobe', name: '–£–±–æ—Ä–∫–∞ —à–∫–∞—Ñ–æ–≤', price: 1500, materials: 50 },
    { id: 'mattress', name: '–•–∏–º—á–∏—Å—Ç–∫–∞ –º–∞—Ç—Ä–∞—Å–∞', price: 2500, materials: 600 },
    { id: 'curtains', name: '–•–∏–º—á–∏—Å—Ç–∫–∞ —à—Ç–æ—Ä', price: 2000, materials: 500 },
    { id: 'furniture', name: '–•–∏–º—á–∏—Å—Ç–∫–∞ –º—è–≥–∫–æ–π –º–µ–±–µ–ª–∏', price: 3500, materials: 900 },
    { id: 'kitchen', name: '–£–±–æ—Ä–∫–∞ –∫—É—Ö–Ω–∏', price: 2000, materials: 200 },
    { id: 'bathroom', name: '–£–±–æ—Ä–∫–∞ —Å–∞–Ω—É–∑–ª–æ–≤', price: 1500, materials: 150 },
    { id: 'pet_hair', name: '–£–±–æ—Ä–∫–∞ —à–µ—Ä—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö', price: 1000, materials: 100 },
    { id: 'disinfection', name: '–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è', price: 2500, materials: 600 }
  ], []);

  // –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
  const commercialServicesList = useMemo(() => [
    { id: 'office_cleaning', name: '–£–±–æ—Ä–∫–∞ –æ—Ñ–∏—Å–æ–≤', price: 4000, materials: 300 },
    { id: 'shopping_centers', name: '–£–±–æ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤', price: 3500, materials: 400 },
    { id: 'restaurants', name: '–£–±–æ—Ä–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤', price: 3500, materials: 350 },
    { id: 'beauty_salons', name: '–£–±–æ—Ä–∫–∞ —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã', price: 3500, materials: 300 },
    { id: 'medical_facilities', name: '–£–±–æ—Ä–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π', price: 3500, materials: 500 },
    { id: 'schools', name: '–£–±–æ—Ä–∫–∞ —à–∫–æ–ª', price: 3500, materials: 250 },
    { id: 'fitness_clubs', name: '–£–±–æ—Ä–∫–∞ —Ñ–∏—Ç–Ω–µ—Å –∫–ª—É–±–æ–≤', price: 3500, materials: 300 },
    { id: 'saunas', name: '–£–±–æ—Ä–∫–∞ –±–∞–Ω–∏ –∏ —Å–∞—É–Ω—ã', price: 3500, materials: 400 },
    { id: 'car_salons', name: '–£–±–æ—Ä–∫–∞ –∞–≤—Ç–æ—Å–∞–ª–æ–Ω–æ–≤', price: 3500, materials: 200 },
    { id: 'parking', name: '–£–±–æ—Ä–∫–∞ –ø–∞—Ä–∫–∏–Ω–≥–æ–≤', price: 2500, materials: 150 },
    { id: 'window_washing', name: '–ú–æ–π–∫–∞ –≤–∏—Ç—Ä–∏–Ω', price: 1500, materials: 100 },
    { id: 'facade_washing', name: '–ú–æ–π–∫–∞ —Ñ–∞—Å–∞–¥–æ–≤', price: 2000, materials: 200 },
    { id: 'industrial_climbing', name: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –∞–ª—å–ø–∏–Ω–∏–∑–º', price: 5000, materials: 300 },
    { id: 'mechanized_cleaning', name: '–ú–µ—Ö–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–±–æ—Ä–∫–∞', price: 4000, materials: 600 },
    { id: 'territory_cleaning', name: '–£–±–æ—Ä–∫–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏', price: 3000, materials: 200 },
    { id: 'grass_cutting', name: '–ü–æ–∫–æ—Å —Ç—Ä–∞–≤—ã', price: 2500, materials: 100 },
    { id: 'snow_removal', name: '–£–±–æ—Ä–∫–∞ —Å–Ω–µ–≥–∞', price: 3000, materials: 50 },
    { id: 'car_detailing', name: '–•–∏–º—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π', price: 2500, materials: 400 }
  ], []);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã (–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –Ω–∞–¥–±–∞–≤–∫–∏)
  const specialModesList = useMemo(() => [
    { 
      id: 'night', 
      name: '–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º', 
      description: '–†–∞–±–æ—Ç–∞ —Å 22:00 –¥–æ 6:00',
      multiplier: 1.3, // +30%
      icon: 'üåô'
    },
    { 
      id: 'express', 
      name: '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π re≈æ–∏–º', 
      description: '–í—ã–µ–∑–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤',
      multiplier: 1.5, // +50%
      icon: '‚ö°'
    }
  ], []);

  // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
  const materialsList: Material[] = useMemo(() => [
    { id: 'detergent', name: '–ú–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', costPerSqm: 5, usage: 100 },
    { id: 'disinfectant', name: '–î–µ–∑–∏–Ω—Ñ–∏—Ü–∏—Ä—É—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', costPerSqm: 3, usage: 100 },
    { id: 'cloths', name: '–¢—Ä—è–ø–∫–∏ –∏ —Å–∞–ª—Ñ–µ—Ç–∫–∏', costPerSqm: 2, usage: 100 },
    { id: 'gloves', name: '–ü–µ—Ä—á–∞—Ç–∫–∏', costPerSqm: 1, usage: 100 },
    { id: 'bags', name: '–ú—É—Å–æ—Ä–Ω—ã–µ –º–µ—à–∫–∏', costPerSqm: 1, usage: 100 },
    { id: 'special', name: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', costPerSqm: 8, usage: 50 }
  ], []);

  // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –∏ –∫–æ–º–∞–Ω–¥—ã
  const calculateTeamAndDuration = (area: number, cleaningType: string, propertyType: string, employeeEfficiency: number, maxHoursPerDay: number = 12) => {
    let baseHours = 0;
    
    switch (cleaningType) {
      case 'maintenance':
        baseHours = Math.max(2, Math.ceil(area / employeeEfficiency));
        break;
      case 'general':
        baseHours = Math.max(3, Math.ceil(area / (employeeEfficiency * 0.8)));
        break;
      case 'postRenovation':
        baseHours = Math.max(4, Math.ceil(area / (employeeEfficiency * 0.6)));
        break;
      case 'eco':
        baseHours = Math.max(3, Math.ceil(area / (employeeEfficiency * 0.9)));
        break;
      case 'vip':
        baseHours = Math.max(4, Math.ceil(area / (employeeEfficiency * 0.6)));
        break;
    }
    
    let multiplier = 1;
    switch (propertyType) {
      case 'house':
        multiplier = 1.3;
        break;
      case 'office':
        multiplier = 0.9;
        break;
      case 'commercial':
        multiplier = 1.1;
        break;
    }
    
    const totalHours = Math.ceil(baseHours * multiplier);
    
    // –†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    const employeesCount = Math.ceil(totalHours / maxHoursPerDay);
    const hoursPerEmployee = totalHours / employeesCount;
    
    let regularHours = 0;
    let overtimeHours = 0;
    
    if (hoursPerEmployee <= maxHoursPerDay) {
      regularHours = totalHours;
      overtimeHours = 0;
    } else {
      regularHours = employeesCount * maxHoursPerDay;
      overtimeHours = totalHours - regularHours;
    }
    
    return {
      totalHours,
      employeesCount,
      regularHours,
      overtimeHours,
      duration: `${totalHours} ${totalHours === 1 ? '—á–∞—Å' : totalHours < 5 ? '—á–∞—Å–∞' : '—á–∞—Å–æ–≤'}`
    };
  };

  // –†–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–º–∞–Ω–¥—ã
  const calculateCosts = useCallback((area: number, teamData: any, employee: Employee, additionalServices: string[], commercialServices: string[]) => {
    const { totalHours, employeesCount, regularHours, overtimeHours } = teamData;
    
    // –¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã—Ö
    let labor = 0;
    if (employee.type === 'staff') {
      // –®—Ç–∞—Ç–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
      const regularCost = regularHours * employee.hourlyRate;
      const overtimeCost = overtimeHours * (employee.overtimeRate || employee.hourlyRate * 1.5);
      labor = regularCost + overtimeCost;
    } else {
      // –§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã
      labor = totalHours * employee.hourlyRate;
    }
    
    // –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
    const baseMaterials = materialsList.reduce((sum, material) => {
      return sum + (material.costPerSqm * area * (material.usage / 100));
    }, 0);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—Å–ª—É–≥
    const additionalMaterials = additionalServices.reduce((sum, serviceId) => {
      const service = additionalServicesList.find(s => s.id === serviceId);
      return sum + (service?.materials || 0);
    }, 0);

    const commercialMaterials = commercialServices.reduce((sum, serviceId) => {
      const service = commercialServicesList.find(s => s.id === serviceId);
      return sum + (service?.materials || 0);
    }, 0);
    
    const materials = baseMaterials + additionalMaterials + commercialMaterials;
    
    // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (—Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ) - —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    const transportCostPerKm = 50; // —Ä—É–±/–∫–º
    const transport = distance * transportCostPerKm * 2 * employeesCount;
    
    // –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (20% –æ—Ç —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç)
    const overhead = labor * 0.2;
    
    const totalCost = labor + materials + transport + overhead;
    
    return {
      labor,
      materials,
      transport,
      overhead,
      totalCost
    };
  }, [distance, additionalServicesList, commercialServicesList, materialsList]);

  // –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –∏ –Ω–∞—Ü–µ–Ω–∫–∏
  const calculatePricing = (totalPrice: number, totalCost: number) => {
    const profit = totalPrice - totalCost;
    const grossMargin = profit;
    const netMargin = profit * 0.8; // –ù–∞–ª–æ–≥–∏ ~20%
    const marginPercentage = (profit / totalPrice) * 100;
    
    return {
      profit,
      grossMargin,
      netMargin,
      marginPercentage
    };
  };

  // –ù–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥
  const serviceNames = useMemo(() => ({
    maintenance: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è —É–±–æ—Ä–∫–∞',
    general: '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è —É–±–æ—Ä–∫–∞',
    postRenovation: '–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞',
    eco: '–≠–∫–æ —É–±–æ—Ä–∫–∞',
    vip: 'VIP —É–±–æ—Ä–∫–∞'
  }), []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–ª–æ—â–∞–¥–∏
  const handleAreaChange = (value: string) => {
    setCustomArea(value);
    const numValue = parseInt(value) || 0;
    if (numValue > 0 && numValue <= 5000) {
      setArea(numValue);
    }
  };

  // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞—Å—á–µ—Ç
  useEffect(() => {
    const selectedEmployeeData = employees.find(e => e.id === selectedEmployee);
    if (!selectedEmployeeData) return;

    const basePrice = basePrices[propertyType][cleaningType] * area;
    const additionalPrice = additionalServices.reduce((sum, serviceId) => {
      const service = additionalServicesList.find(s => s.id === serviceId);
      return sum + (service?.price || 0);
    }, 0);

    const commercialPrice = commercialServices.reduce((sum, serviceId) => {
      const service = commercialServicesList.find(s => s.id === serviceId);
      return sum + (service?.price || 0);
    }, 0);

    // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –±–µ–∑ —Å–ø–µ—Ü—Ä–µ–∂–∏–º–æ–≤
    let baseTotal = basePrice + additionalPrice + commercialPrice;
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ 6000 —Ä—É–±
    if (baseTotal < 6000) {
      baseTotal = 6000;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã (–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –Ω–∞–¥–±–∞–≤–∫–∏)
    let specialModeMultiplier = 1;
    specialModes.forEach(modeId => {
      const mode = specialModesList.find(m => m.id === modeId);
      if (mode) {
        specialModeMultiplier *= mode.multiplier;
      }
    });

    const totalPrice = baseTotal * specialModeMultiplier;

    const maxHoursPerDay = selectedEmployeeData.maxHoursPerDay || 12;
    const teamData = calculateTeamAndDuration(area, cleaningType, propertyType, selectedEmployeeData.efficiency, maxHoursPerDay);
    
    const costs = calculateCosts(area, teamData, selectedEmployeeData, additionalServices, commercialServices);
    const margins = calculatePricing(totalPrice, costs.totalCost);

    const pricing = {
      pricePerSqm: totalPrice / area,
      pricePerHour: totalPrice / teamData.totalHours,
      pricePerService: totalPrice / (1 + additionalServices.length)
    };

    // –†–∞—Å—á–µ—Ç –∫–æ–º–∞–Ω–¥—ã
    const team = {
      employeesCount: teamData.employeesCount,
      totalHours: teamData.totalHours,
      regularHours: teamData.regularHours,
      overtimeHours: teamData.overtimeHours,
      costPerEmployee: costs.labor / teamData.employeesCount,
      totalLaborCost: costs.labor
    };

    setResult({
      basePrice: basePrice < 6000 ? 6000 : basePrice,
      additionalServices: additionalPrice,
      commercialServices: commercialPrice,
      totalPrice,
      duration: teamData.duration,
      services: [
        serviceNames[cleaningType],
        ...additionalServices.map(id => 
          additionalServicesList.find(s => s.id === id)?.name || ''
        ).filter(Boolean),
        ...commercialServices.map(id =>
          commercialServicesList.find(s => s.id === id)?.name || ''
        ).filter(Boolean)
      ],
      team,
      costs: {
        ...costs,
        profit: margins.profit
      },
      margins,
      pricing
    });
  }, [propertyType, area, cleaningType, additionalServices, commercialServices, specialModes, distance, selectedEmployee, employees, additionalServicesList, commercialServicesList, specialModesList, basePrices, serviceNames, calculateCosts]);

  const handleServiceToggle = (serviceId: string) => {
    setAdditionalServices(prev => 
      prev.includes(serviceId) 
        ? prev.filter(id => id !== serviceId)
        : [...prev, serviceId]
    );
  };

  const handleCommercialServiceToggle = (serviceId: string) => {
    setCommercialServices(prev => 
      prev.includes(serviceId) 
        ? prev.filter(id => id !== serviceId)
        : [...prev, serviceId]
    );
  };

  const handleSpecialModeToggle = (modeId: string) => {
    setSpecialModes(prev => 
      prev.includes(modeId) 
        ? prev.filter(id => id !== modeId)
        : [...prev, modeId]
    );
  };

  const handleEmployeeChange = (employeeId: string) => {
    setSelectedEmployee(employeeId);
  };

  const handleEmployeeUpdate = (employeeId: string, field: keyof Employee, value: number) => {
    setEmployees(prev => prev.map(emp => 
      emp.id === employeeId ? { ...emp, [field]: value } : emp
    ));
  };

  const exportCalculation = () => {
    if (!result) return;
    
    const data = {
      timestamp: new Date().toISOString(),
      calculation: result,
      parameters: {
        propertyType,
        area,
        cleaningType,
        additionalServices,
        distance,
        selectedEmployee: employees.find(e => e.id === selectedEmployee)
      }
    };
    
    if (typeof window !== 'undefined') {
      const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `calculation-${new Date().toISOString().split('T')[0]}.json`;
      a.click();
      URL.revokeObjectURL(url);
    }
  };

  const loadPreset = (preset: Preset) => {
    setPropertyType(preset.propertyType);
    setCleaningType(preset.cleaningType);
    setArea(preset.area);
    setCustomArea(preset.area.toString());
    setDistance(preset.distance);
    setSelectedEmployee(preset.employeeId);
    setAdditionalServices(preset.additionalServices);
    setCommercialServices(preset.commercialServices);
    setSpecialModes(preset.specialModes);
  };

  const saveCurrentAsPreset = () => {
    const newPreset: Preset = {
      id: Date.now().toString(),
      name: newPresetName,
      propertyType,
      cleaningType,
      area,
      distance,
      employeeId: selectedEmployee,
      additionalServices,
      commercialServices,
      specialModes
    };
    
    setPresets(prev => [...prev, newPreset]);
    setNewPresetName('');
    setShowPresetModal(false);
  };

  const deletePreset = (presetId: string) => {
    setPresets(prev => prev.filter(p => p.id !== presetId));
  };

  return (
    <div className="bg-white rounded-2xl shadow-lg p-8">
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center space-x-3">
          <div className="w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center">
            <Calculator className="w-6 h-6 text-primary-600" />
          </div>
          <div>
            <h3 className="text-2xl font-bold text-gray-900">
              –ê–¥–º–∏–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            </h3>
            <p className="text-gray-600">
              –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞—Ç—Ä–∞—Ç –∏ –ø—Ä–∏–±—ã–ª–∏
            </p>
          </div>
        </div>
        <div className="flex items-center space-x-3">
          <button
            onClick={() => setShowPresetModal(true)}
            className="btn-secondary flex items-center space-x-2"
          >
            <Save className="w-4 h-4" />
            <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç</span>
          </button>
          <button
            onClick={exportCalculation}
            className="btn-secondary flex items-center space-x-2"
          >
            <Download className="w-4 h-4" />
            <span>–≠–∫—Å–ø–æ—Ä—Ç</span>
          </button>
        </div>
      </div>

      {/* –ü—Ä–µ—Å–µ—Ç—ã */}
      <div className="mb-8">
        <h4 className="text-lg font-semibold text-gray-900 mb-4">–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã</h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {presets.map((preset) => (
            <div
              key={preset.id}
              className="bg-gray-50 rounded-lg p-4 border border-gray-200 hover:border-primary-300 transition-colors"
            >
              <div className="flex items-center justify-between mb-2">
                <h5 className="font-medium text-gray-900">{preset.name}</h5>
                <button
                  onClick={() => deletePreset(preset.id)}
                  className="text-red-500 hover:text-red-700 text-sm"
                >
                  √ó
                </button>
              </div>
              <div className="text-sm text-gray-600 mb-3">
                {preset.area}–º¬≤ ‚Ä¢ {preset.distance}–∫–º ‚Ä¢ {preset.additionalServices.length} –¥–æ–ø. ‚Ä¢ {preset.commercialServices.length} –∫–æ–º–º. ‚Ä¢ {preset.specialModes.length} —Ä–µ–∂–∏–º.
              </div>
              <button
                onClick={() => loadPreset(preset)}
                className="w-full btn-primary py-2 text-sm"
              >
                –ó–∞–≥—Ä—É–∑–∏—Ç—å
              </button>
            </div>
          ))}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ */}
      {showPresetModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-xl p-6 w-full max-w-md mx-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç
            </h3>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞
                </label>
                <input
                  type="text"
                  value={newPresetName}
                  onChange={(e) => setNewPresetName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–≤–∞—Ä—Ç–∏—Ä–∞ 80–º¬≤ - –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                />
              </div>
              <div className="text-sm text-gray-600">
                <p>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</p>
                <ul className="mt-2 space-y-1">
                  <li>‚Ä¢ {serviceNames[cleaningType]} - {area}–º¬≤</li>
                  <li>‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}–∫–º</li>
                  <li>‚Ä¢ –î–æ–ø. —É—Å–ª—É–≥: {additionalServices.length}</li>
                <li>‚Ä¢ –ö–æ–º–º. —É—Å–ª—É–≥: {commercialServices.length}</li>
                <li>‚Ä¢ –°–ø–µ—Ü. —Ä–µ–∂–∏–º–æ–≤: {specialModes.length}</li>
                </ul>
              </div>
            </div>
            <div className="flex items-center justify-end space-x-3 mt-6">
              <button
                onClick={() => setShowPresetModal(false)}
                className="px-4 py-2 text-gray-600 hover:text-gray-800"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={saveCurrentAsPreset}
                disabled={!newPresetName.trim()}
                className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
              >
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã */}
        <div className="space-y-6">
          {/* –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è
            </label>
            <div className="grid grid-cols-2 gap-3">
              {[
                { id: 'apartment', name: '–ö–≤–∞—Ä—Ç–∏—Ä–∞', icon: Home },
                { id: 'house', name: '–î–æ–º', icon: Building },
                { id: 'office', name: '–û—Ñ–∏—Å', icon: Building },
                { id: 'commercial', name: '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ', icon: Building }
              ].map((type) => (
                <button
                  key={type.id}
                  onClick={() => setPropertyType(type.id as any)}
                  className={`p-4 rounded-lg border-2 transition-all duration-200 ${
                    propertyType === type.id
                      ? 'border-primary-600 bg-primary-50 text-primary-700'
                      : 'border-gray-200 hover:border-primary-300'
                  }`}
                >
                  <type.icon className="w-6 h-6 mx-auto mb-2" />
                  <span className="text-sm font-medium">{type.name}</span>
                </button>
              ))}
            </div>
          </div>

          {/* –ü–ª–æ—â–∞–¥—å */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è
            </label>
            <div className="space-y-3">
              <div className="grid grid-cols-3 gap-2">
                {[50, 100, 200].map((size) => (
                  <button
                    key={size}
                    onClick={() => {
                      setArea(size);
                      setCustomArea(size.toString());
                    }}
                    className={`p-2 rounded-lg border-2 transition-all duration-200 text-sm ${
                      area === size
                        ? 'border-primary-600 bg-primary-50 text-primary-700'
                        : 'border-gray-200 hover:border-primary-300'
                    }`}
                  >
                    {size} –º¬≤
                  </button>
                ))}
              </div>
              
              <div>
                <label className="block text-xs text-gray-600 mb-2">
                  –¢–æ—á–Ω–∞—è –ø–ª–æ—â–∞–¥—å:
                </label>
                <div className="flex items-center space-x-2">
                  <input
                    type="number"
                    min="1"
                    max="5000"
                    value={customArea}
                    onChange={(e) => handleAreaChange(e.target.value)}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 150"
                    className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200"
                  />
                  <span className="text-sm text-gray-500">–º¬≤</span>
                </div>
              </div>
            </div>
          </div>

          {/* –¢–∏–ø —É–±–æ—Ä–∫–∏ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –¢–∏–ø —É–±–æ—Ä–∫–∏
            </label>
            <div className="space-y-3">
              {[
                { id: 'maintenance', name: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è', icon: Home },
                { id: 'general', name: '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–∞—è', icon: Shield },
                { id: 'postRenovation', name: '–ü–æ—Å–ª–µ —Ä–µ–º–æ–Ω—Ç–∞', icon: Sparkles },
                { id: 'eco', name: '–≠–∫–æ —É–±–æ—Ä–∫–∞', icon: CheckCircle },
                { id: 'vip', name: 'VIP —É–±–æ—Ä–∫–∞', icon: Star }
              ].map((type) => (
                <button
                  key={type.id}
                  onClick={() => setCleaningType(type.id as any)}
                  className={`w-full p-4 rounded-lg border-2 transition-all duration-200 text-left ${
                    cleaningType === type.id
                      ? 'border-primary-600 bg-primary-50 text-primary-700'
                      : 'border-gray-200 hover:border-primary-300'
                  }`}
                >
                  <div className="flex items-center space-x-3">
                    <type.icon className="w-5 h-5" />
                    <span className="font-medium">{type.name}</span>
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä–µ–∫—Ç–∞ (–∫–º)
            </label>
            <input
              type="number"
              min="0"
              max="100"
              value={distance}
              onChange={(e) => setDistance(parseInt(e.target.value) || 0)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
            />
          </div>
        </div>

        {/* –°—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞ - –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏ —É—Å–ª—É–≥–∏ */}
        <div className="space-y-6">
          {/* –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
            </label>
            <div className="space-y-3">
              {employees.map((employee) => (
                <div
                  key={employee.id}
                  className={`p-4 rounded-lg border-2 transition-all duration-200 ${
                    selectedEmployee === employee.id
                      ? 'border-primary-600 bg-primary-50'
                      : 'border-gray-200'
                  }`}
                >
                                     <div className="flex items-center justify-between mb-3">
                     <div className="flex items-center space-x-3">
                       <input
                         type="radio"
                         checked={selectedEmployee === employee.id}
                         onChange={() => handleEmployeeChange(employee.id)}
                         className="text-primary-600"
                       />
                       <span className="font-medium">{employee.name}</span>
                     </div>
                     <div className="text-sm text-gray-600">
                       {employee.efficiency} –º¬≤/—á–∞—Å
                     </div>
                   </div>
                   <div className="flex items-center justify-between mb-3">
                     <span className={`text-xs px-2 py-1 rounded-full ${
                       employee.type === 'staff' 
                         ? 'bg-green-100 text-green-800' 
                         : 'bg-blue-100 text-blue-800'
                     }`}>
                       {employee.type === 'staff' ? '–®—Ç–∞—Ç–Ω—ã–π' : '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä'}
                     </span>
                     {employee.type === 'staff' && (
                       <span className="text-xs text-gray-500">
                         –ú–∞–∫—Å: {employee.maxHoursPerDay}—á/–¥–µ–Ω—å
                       </span>
                     )}
                   </div>
                  
                                     <div className="grid grid-cols-2 gap-3">
                     <div>
                       <label className="block text-xs text-gray-600 mb-1">
                         –°—Ç–∞–≤–∫–∞ (‚ÇΩ/—á–∞—Å)
                       </label>
                       <input
                         type="number"
                         value={employee.hourlyRate}
                         onChange={(e) => handleEmployeeUpdate(employee.id, 'hourlyRate', parseInt(e.target.value) || 0)}
                         className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-primary-500"
                       />
                     </div>
                     <div>
                       <label className="block text-xs text-gray-600 mb-1">
                         –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                       </label>
                       <input
                         type="number"
                         value={employee.efficiency}
                         onChange={(e) => handleEmployeeUpdate(employee.id, 'efficiency', parseInt(e.target.value) || 0)}
                         className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-primary-500"
                       />
                     </div>
                   </div>
                   {employee.type === 'staff' && (
                     <div className="grid grid-cols-2 gap-3 mt-3">
                       <div>
                         <label className="block text-xs text-gray-600 mb-1">
                           –ú–∞–∫—Å. —á–∞—Å–æ–≤/–¥–µ–Ω—å
                         </label>
                         <input
                           type="number"
                           value={employee.maxHoursPerDay || 8}
                           onChange={(e) => handleEmployeeUpdate(employee.id, 'maxHoursPerDay', parseInt(e.target.value) || 8)}
                           className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-primary-500"
                         />
                       </div>
                       <div>
                         <label className="block text-xs text-gray-600 mb-1">
                           –°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ (‚ÇΩ/—á–∞—Å)
                         </label>
                         <input
                           type="number"
                           value={employee.overtimeRate || employee.hourlyRate * 1.5}
                           onChange={(e) => handleEmployeeUpdate(employee.id, 'overtimeRate', parseInt(e.target.value) || 0)}
                           className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:ring-1 focus:ring-primary-500"
                         />
                       </div>
                     </div>
                   )}
                </div>
              ))}
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
            </label>
            <div className="grid grid-cols-1 gap-2 max-h-60 overflow-y-auto">
              {additionalServicesList.map((service) => (
                <button
                  key={service.id}
                  onClick={() => handleServiceToggle(service.id)}
                  className={`p-3 rounded-lg border-2 transition-all duration-200 text-left ${
                    additionalServices.includes(service.id)
                      ? 'border-primary-600 bg-primary-50 text-primary-700'
                      : 'border-gray-200 hover:border-primary-300'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Sparkles className="w-4 h-4" />
                      <span className="text-sm">{service.name}</span>
                    </div>
                    <div className="text-right">
                      <div className="text-sm font-medium">{service.price} ‚ÇΩ</div>
                      <div className="text-xs text-gray-500">+{service.materials} ‚ÇΩ –º–∞—Ç.</div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
            </label>
            <div className="grid grid-cols-1 gap-2 max-h-60 overflow-y-auto">
              {commercialServicesList.map((service) => (
                <button
                  key={service.id}
                  onClick={() => handleCommercialServiceToggle(service.id)}
                  className={`p-3 rounded-lg border-2 transition-all duration-200 text-left ${
                    commercialServices.includes(service.id)
                      ? 'border-blue-600 bg-blue-50 text-blue-700'
                      : 'border-gray-200 hover:border-blue-300'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Building className="w-4 h-4" />
                      <span className="text-sm">{service.name}</span>
                    </div>
                    <div className="text-right">
                      <div className="text-sm font-medium">{service.price} ‚ÇΩ</div>
                      <div className="text-xs text-gray-500">+{service.materials} ‚ÇΩ –º–∞—Ç.</div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã
            </label>
            <div className="grid grid-cols-1 gap-2">
              {specialModesList.map((mode) => (
                <button
                  key={mode.id}
                  onClick={() => handleSpecialModeToggle(mode.id)}
                  className={`p-3 rounded-lg border-2 transition-all duration-200 text-left ${
                    specialModes.includes(mode.id)
                      ? 'border-orange-600 bg-orange-50 text-orange-700'
                      : 'border-gray-200 hover:border-orange-300'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <span className="w-4 h-4 text-center">{mode.icon}</span>
                      <div>
                        <div className="text-sm font-medium">{mode.name}</div>
                        <div className="text-xs text-gray-500">{mode.description}</div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-sm font-medium text-orange-600">
                        +{Math.round((mode.multiplier - 1) * 100)}%
                      </div>
                    </div>
                  </div>
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        <div className="space-y-6">
          {result && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="space-y-6"
            >
              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="bg-gradient-to-br from-primary-50 to-secondary-50 rounded-xl p-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-4">
                  –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞
                </h4>
                
                <div className="space-y-4">
                  <div className="bg-white rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-medium text-gray-900">
                        {result.services[0]}
                      </span>
                      <span className="text-lg font-bold text-primary-600">
                        {result.basePrice.toLocaleString()} ‚ÇΩ
                      </span>
                    </div>
                                       <div className="text-sm text-gray-600">
                     –ü–ª–æ—â–∞–¥—å: {area} –º¬≤ ‚Ä¢ –í—Ä–µ–º—è: {result.duration}
                   </div>
                   <div className="text-xs text-gray-500 mt-1">
                     –ö–æ–º–∞–Ω–¥–∞: {result.team.employeesCount} {result.team.employeesCount === 1 ? '—á–µ–ª–æ–≤–µ–∫' : result.team.employeesCount < 5 ? '—á–µ–ª–æ–≤–µ–∫–∞' : '—á–µ–ª–æ–≤–µ–∫'}
                   </div>
                  </div>

                  {result.services.slice(1).map((service, index) => {
                    const additionalService = additionalServicesList.find(s => s.name === service);
                    const commercialService = commercialServicesList.find(s => s.name === service);
                    const price = additionalService?.price || commercialService?.price || 0;
                    
                    return (
                      <div key={index} className="bg-white rounded-lg p-4">
                        <div className="flex items-center justify-between">
                          <span className="font-medium text-gray-900">{service}</span>
                          <span className="text-lg font-bold text-primary-600">
                            {price.toLocaleString()} ‚ÇΩ
                          </span>
                        </div>
                      </div>
                    );
                  })}

                  <div className="bg-primary-600 text-white rounded-lg p-4">
                    <div className="flex items-center justify-between">
                      <span className="text-lg font-semibold">–ò—Ç–æ–≥–æ:</span>
                      <span className="text-2xl font-bold">
                        {result.totalPrice.toLocaleString()} ‚ÇΩ
                      </span>
                    </div>
                  </div>
                </div>
              </div>

                             {/* –ö–æ–º–∞–Ω–¥–∞ */}
               <div className="bg-blue-50 rounded-xl p-6">
                 <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                   <Users className="w-5 h-5" />
                   <span>–ö–æ–º–∞–Ω–¥–∞</span>
                 </h4>
                 
                 <div className="space-y-3">
                   <div className="flex justify-between">
                     <span className="text-gray-600">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</span>
                     <span className="font-medium">{result.team.employeesCount}</span>
                   </div>
                   <div className="flex justify-between">
                     <span className="text-gray-600">–û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</span>
                     <span className="font-medium">{result.team.totalHours} —á</span>
                   </div>
                   <div className="flex justify-between">
                     <span className="text-gray-600">–û–±—ã—á–Ω—ã–µ —á–∞—Å—ã:</span>
                     <span className="font-medium">{result.team.regularHours} —á</span>
                   </div>
                   {result.team.overtimeHours > 0 && (
                     <div className="flex justify-between">
                       <span className="text-gray-600">–°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ —á–∞—Å—ã:</span>
                       <span className="font-medium text-orange-600">{result.team.overtimeHours} —á</span>
                     </div>
                   )}
                   <div className="flex justify-between">
                     <span className="text-gray-600">–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∫–æ–º–∞–Ω–¥—É:</span>
                     <span className="font-medium">{result.team.totalLaborCost.toLocaleString()} ‚ÇΩ</span>
                   </div>
                   <div className="flex justify-between">
                     <span className="text-gray-600">–ù–∞ –æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</span>
                     <span className="font-medium">{result.team.costPerEmployee.toLocaleString()} ‚ÇΩ</span>
                   </div>
                 </div>
               </div>

               {/* –ó–∞—Ç—Ä–∞—Ç—ã */}
               <div className="bg-gray-50 rounded-xl p-6">
                 <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                   <DollarSign className="w-5 h-5" />
                   <span>–ó–∞—Ç—Ä–∞—Ç—ã</span>
                 </h4>
                
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">–¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã:</span>
                    <span className="font-medium">{result.costs.labor.toLocaleString()} ‚ÇΩ</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</span>
                    <span className="font-medium">{result.costs.materials.toLocaleString()} ‚ÇΩ</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</span>
                    <span className="font-medium">{result.costs.transport.toLocaleString()} ‚ÇΩ</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">–ù–∞–∫–ª–∞–¥–Ω—ã–µ:</span>
                    <span className="font-medium">{result.costs.overhead.toLocaleString()} ‚ÇΩ</span>
                  </div>
                  <div className="border-t pt-3">
                    <div className="flex justify-between font-semibold">
                      <span>–û–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã:</span>
                      <span className="text-red-600">{result.costs.totalCost.toLocaleString()} ‚ÇΩ</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* –ü—Ä–∏–±—ã–ª—å */}
              <div className="bg-green-50 rounded-xl p-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                  <TrendingUp className="w-5 h-5" />
                  <span>–ü—Ä–∏–±—ã–ª—å</span>
                </h4>
                
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">–í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                    <span className="font-medium text-green-600">{result.margins.grossMargin.toLocaleString()} ‚ÇΩ</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</span>
                    <span className="font-medium text-green-600">{result.margins.netMargin.toLocaleString()} ‚ÇΩ</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</span>
                    <span className="font-medium text-green-600">{result.margins.marginPercentage.toFixed(1)}%</span>
                  </div>
                </div>
              </div>

              {/* –¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ */}
              <div className="bg-blue-50 rounded-xl p-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center space-x-2">
                  <Calculator className="w-5 h-5" />
                  <span>–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</span>
                </h4>
                
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-gray-600">–¶–µ–Ω–∞ –∑–∞ –º¬≤:</span>
                    <span className="font-medium">{result.pricing.pricePerSqm.toFixed(0)} ‚ÇΩ/–º¬≤</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">–¶–µ–Ω–∞ –∑–∞ —á–∞—Å:</span>
                    <span className="font-medium">{result.pricing.pricePerHour.toFixed(0)} ‚ÇΩ/—á–∞—Å</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">–¶–µ–Ω–∞ –∑–∞ —É—Å–ª—É–≥—É:</span>
                    <span className="font-medium">{result.pricing.pricePerService.toFixed(0)} ‚ÇΩ</span>
                  </div>
                </div>
              </div>

              {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è */}
              {result.margins.marginPercentage < 20 && (
                <div className="bg-yellow-50 border border-yellow-200 rounded-xl p-4">
                  <div className="flex items-center space-x-2 mb-2">
                    <AlertCircle className="w-5 h-5 text-yellow-600" />
                    <span className="font-medium text-yellow-800">–ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å</span>
                  </div>
                  <p className="text-sm text-yellow-700">
                    –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å {result.margins.marginPercentage.toFixed(1)}% –Ω–∏–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö 20%. 
                    –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞—Ç—Ä–∞—Ç.
                  </p>
                </div>
              )}

              {result.margins.marginPercentage > 50 && (
                <div className="bg-green-50 border border-green-200 rounded-xl p-4">
                  <div className="flex items-center space-x-2 mb-2">
                    <Info className="w-5 h-5 text-green-600" />
                    <span className="font-medium text-green-800">–í—ã—Å–æ–∫–∞—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å</span>
                  </div>
                  <p className="text-sm text-green-700">
                    –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å {result.margins.marginPercentage.toFixed(1)}% –≤—ã—à–µ —Å—Ä–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π. 
                    –í–æ–∑–º–æ–∂–Ω–æ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.
                  </p>
                </div>
              )}
            </motion.div>
          )}
        </div>
      </div>
    </div>
  );
} 