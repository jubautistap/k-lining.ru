#!/usr/bin/env node

/**
 * üéØ Core Web Vitals Checker —Å–æ–≥–ª–∞—Å–Ω–æ Google SEO Starter Guide
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞ k-lining.ru
 */

const API_URL = "https://www.googleapis.com/pagespeedonline/v5/runPagespeed";

// –°—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const pages = [
  { name: "–ì–ª–∞–≤–Ω–∞—è", url: "https://k-lining.ru" },
  { name: "–£—Å–ª—É–≥–∏ - –£–±–æ—Ä–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä", url: "https://k-lining.ru/services/apartment-cleaning" },
  { name: "–ë–ª–æ–≥", url: "https://k-lining.ru/blog" },
  { name: "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", url: "https://k-lining.ru/calculator" },
  { name: "–ö–æ–Ω—Ç–∞–∫—Ç—ã", url: "https://k-lining.ru/contacts" }
];

const strategies = ["mobile", "desktop"];

function formatScore(score) {
  if (score >= 90) return `üü¢ ${score} (–û—Ç–ª–∏—á–Ω–æ)`;
  if (score >= 50) return `üü° ${score} (–•–æ—Ä–æ—à–æ)`;
  return `üî¥ ${score} (–ü–ª–æ—Ö–æ)`;
}

function formatMetric(metric) {
  if (!metric) return "‚ùì –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
  
  switch (metric.category) {
    case "FAST": return `üü¢ ${metric.category}`;
    case "AVERAGE": return `üü° ${metric.category}`;
    case "SLOW": return `üî¥ ${metric.category}`;
    default: return `‚ùì ${metric.category}`;
  }
}

async function checkPageSpeed(url, strategy) {
  const params = new URLSearchParams({
    url: url,
    strategy: strategy,
    category: 'performance'
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
  const apiKey = process.env.PAGESPEED_API_KEY;
  if (apiKey) {
    params.set('key', apiKey);
    console.log(`üîë –ò—Å–ø–æ–ª—å–∑—É—é API –∫–ª—é—á –¥–ª—è ${strategy}`);
  } else {
    console.log(`‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø`);
  }
  
  const fullUrl = `${API_URL}?${params}`;
  
  try {
    console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è—é ${strategy}: ${url}`);
    const response = await fetch(fullUrl);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    
    // Lighthouse Performance Score
    const performanceScore = Math.round(data.lighthouseResult.categories.performance.score * 100);
    
    // Core Web Vitals from Lighthouse (Lab Data)
    const lighthouse = data.lighthouseResult.audits;
    const lcp = lighthouse['largest-contentful-paint']?.displayValue || 'N/A';
    const fid = lighthouse['first-input-delay']?.displayValue || lighthouse['total-blocking-time']?.displayValue || 'N/A';
    const cls = lighthouse['cumulative-layout-shift']?.displayValue || 'N/A';
    
    // Core Web Vitals from CrUX (Field Data)
    const fieldData = data.loadingExperience?.metrics || {};
    const lcpField = fieldData.LARGEST_CONTENTFUL_PAINT_MS;
    const fidField = fieldData.FIRST_INPUT_DELAY_MS || fieldData.INTERACTION_TO_NEXT_PAINT;
    const clsField = fieldData.CUMULATIVE_LAYOUT_SHIFT_SCORE;
    
    return {
      url,
      strategy,
      performanceScore,
      lab: { lcp, fid, cls },
      field: {
        lcp: lcpField,
        fid: fidField, 
        cls: clsField
      }
    };
    
  } catch (error) {
    if (error.message.includes('429')) {
      console.error(`‚è±Ô∏è  –õ–∏–º–∏—Ç API –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á: https://developers.google.com/speed/docs/insights/v5/get-started`);
      console.error(`üí° –î–æ–±–∞–≤—å—Ç–µ PAGESPEED_API_KEY –≤ .env.local –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤`);
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${url} (${strategy}):`, error.message);
    }
    return null;
  }
}

async function generateReport() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ Core Web Vitals –¥–ª—è k-lining.ru\n');
  console.log('üìã –°–æ–≥–ª–∞—Å–Ω–æ Google SEO Starter Guide:\n');
  console.log('   ‚Ä¢ LCP (Largest Contentful Paint) < 2.5s');
  console.log('   ‚Ä¢ FID (First Input Delay) < 100ms'); 
  console.log('   ‚Ä¢ CLS (Cumulative Layout Shift) < 0.1\n');
  
  const results = [];
  
  for (const page of pages) {
    console.log(`\nüåê –ü—Ä–æ–≤–µ—Ä—è—é: ${page.name}`);
    console.log(`üìÑ URL: ${page.url}`);
    
    for (const strategy of strategies) {
      const result = await checkPageSpeed(page.url, strategy);
      if (result) {
        results.push(result);
        
        console.log(`\nüì± ${strategy.toUpperCase()}:`);
        console.log(`   Performance Score: ${formatScore(result.performanceScore)}`);
        console.log(`   
   LAB DATA (Lighthouse):`);
        console.log(`   ‚Ä¢ LCP: ${result.lab.lcp}`);
        console.log(`   ‚Ä¢ FID/TBT: ${result.lab.fid}`);
        console.log(`   ‚Ä¢ CLS: ${result.lab.cls}`);
        
        if (Object.keys(result.field).some(key => result.field[key])) {
          console.log(`   
   FIELD DATA (CrUX - —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏):`);
          console.log(`   ‚Ä¢ LCP: ${formatMetric(result.field.lcp)}`);
          console.log(`   ‚Ä¢ FID/INP: ${formatMetric(result.field.fid)}`);
          console.log(`   ‚Ä¢ CLS: ${formatMetric(result.field.cls)}`);
        } else {
          console.log(`   üîç Field Data: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç—Ä–∞—Ñ–∏–∫–∞)`);
        }
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–¥–æ–ª—å—à–µ –±–µ–∑ API –∫–ª—é—á–∞)
      const delay = process.env.PAGESPEED_API_KEY ? 1000 : 2000;
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ CORE WEB VITALS');
  console.log('='.repeat(60));
  
  const averageScores = {
    mobile: results.filter(r => r.strategy === 'mobile').reduce((sum, r) => sum + r.performanceScore, 0) / results.filter(r => r.strategy === 'mobile').length,
    desktop: results.filter(r => r.strategy === 'desktop').reduce((sum, r) => sum + r.performanceScore, 0) / results.filter(r => r.strategy === 'desktop').length
  };
  
  console.log(`üì± –°—Ä–µ–¥–Ω–∏–π Performance Score (Mobile): ${formatScore(Math.round(averageScores.mobile))}`);
  console.log(`üíª –°—Ä–µ–¥–Ω–∏–π Performance Score (Desktop): ${formatScore(Math.round(averageScores.desktop))}`);
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:');
  
  if (averageScores.mobile < 90 || averageScores.desktop < 90) {
    console.log('üîß –ù—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    console.log('   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (WebP, —Å–∂–∞—Ç–∏–µ)');
    console.log('   ‚Ä¢ –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å CSS/JS');
    console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CDN');
    console.log('   ‚Ä¢ Lazy loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
    console.log('   ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç—ã (preload)');
  } else {
    console.log('‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.');
  }
  
  console.log('\nüìà –î–ê–õ–¨–ù–ï–ô–®–ò–ï –î–ï–ô–°–¢–í–ò–Ø:');
  console.log('   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç');
  console.log('   ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤ Google Search Console');
  console.log('   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å CrUX –¥–∞–Ω–Ω—ã–µ');
  console.log('   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–ª–æ—è');
  
  const timestamp = new Date().toLocaleString('ru-RU');
  console.log(`\n‚è∞ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${timestamp}`);
}

// –ó–∞–ø—É—Å–∫
generateReport().catch(console.error);