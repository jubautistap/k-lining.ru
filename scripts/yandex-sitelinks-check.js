#!/usr/bin/env node

/**
 * üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å–∞
 * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∏ k-lining.ru
 */

const https = require('https');

const SITE_URL = 'https://k-lining.ru';

function makeRequest(url) {
  return new Promise((resolve, reject) => {
    const req = https.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          html: data
        });
      });
    });
    
    req.on('error', (err) => {
      reject(err);
    });
    
    req.setTimeout(10000, () => {
      req.destroy();
      reject(new Error('Timeout'));
    });
  });
}

function analyzeForSitelinks(html) {
  const analysis = {
    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    navLinks: [],
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    internalLinks: [],
    
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    popularSections: [],
    
    // –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    hasBreadcrumbs: false,
    breadcrumbSchema: false,
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    hasNavigationSchema: false,
    hasSiteNavigationElement: false,
    
    // –ê–Ω–∫–æ—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞)
    anchorTexts: [],
    
    // –°—á–µ—Ç—á–∏–∫–∏
    totalInternalLinks: 0,
    uniqueInternalLinks: 0
  };
  
  // –ò—â–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –º–µ–Ω—é
  const navMatches = html.match(/<nav[^>]*>[\s\S]*?<\/nav>/gi);
  if (navMatches) {
    navMatches.forEach(nav => {
      const linkMatches = nav.match(/<a[^>]*href=["']([^"']+)["'][^>]*>([^<]+)<\/a>/gi);
      if (linkMatches) {
        linkMatches.forEach(link => {
          const hrefMatch = link.match(/href=["']([^"']+)["']/);
          const textMatch = link.match(/>([^<]+)</);
          if (hrefMatch && textMatch && hrefMatch[1].startsWith('/')) {
            analysis.navLinks.push({
              href: hrefMatch[1],
              text: textMatch[1].trim()
            });
          }
        });
      }
    });
  }
  
  // –ò—â–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Å—ã–ª–∫–∏
  const allLinkMatches = html.match(/<a[^>]*href=["']\/[^"']*["'][^>]*>([^<]+)<\/a>/gi);
  if (allLinkMatches) {
    const linkSet = new Set();
    allLinkMatches.forEach(link => {
      const hrefMatch = link.match(/href=["']([^"']+)["']/);
      const textMatch = link.match(/>([^<]+)</);
      if (hrefMatch && textMatch) {
        const href = hrefMatch[1];
        const text = textMatch[1].trim();
        
        analysis.internalLinks.push({ href, text });
        analysis.anchorTexts.push(text);
        linkSet.add(href);
      }
    });
    
    analysis.totalInternalLinks = allLinkMatches.length;
    analysis.uniqueInternalLinks = linkSet.size;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
  analysis.hasBreadcrumbs = html.includes('breadcrumb') || html.includes('–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–∞–π—Ç—É');
  analysis.breadcrumbSchema = html.includes('"@type":"BreadcrumbList"') || html.includes('"@type": "BreadcrumbList"');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  analysis.hasNavigationSchema = html.includes('SiteNavigationElement');
  analysis.hasSiteNavigationElement = html.includes('"@type":"SiteNavigationElement"');
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
  const serviceLinks = analysis.internalLinks.filter(link => 
    link.href.includes('/services/') || 
    link.text.toLowerCase().includes('—É–±–æ—Ä–∫–∞') ||
    link.text.toLowerCase().includes('—Ö–∏–º—á–∏—Å—Ç–∫–∞') ||
    link.text.toLowerCase().includes('–º—ã—Ç—å–µ')
  );
  
  analysis.popularSections = serviceLinks.slice(0, 6);
  
  return analysis;
}

function scoreOptimization(analysis) {
  let score = 0;
  const maxScore = 100;
  const issues = [];
  const recommendations = [];
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (20 –±–∞–ª–ª–æ–≤)
  if (analysis.navLinks.length >= 4) {
    score += 20;
  } else {
    issues.push(`–ú–∞–ª–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${analysis.navLinks.length}/4`);
    recommendations.push('–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
  }
  
  // –ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∫–æ—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ (20 –±–∞–ª–ª–æ–≤) 
  const goodAnchors = analysis.anchorTexts.filter(text => 
    text.length > 3 && 
    text.length < 50 && 
    !text.includes('–ü–æ–¥—Ä–æ–±–Ω–µ–µ') &&
    !text.includes('–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ')
  );
  
  if (goodAnchors.length >= analysis.totalInternalLinks * 0.7) {
    score += 20;
  } else {
    issues.push(`–ö–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∫–æ—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –Ω–∏–∑–∫–æ–µ: ${goodAnchors.length}/${analysis.totalInternalLinks}`);
    recommendations.push('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∫–æ—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã');
  }
  
  // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ø–µ—Ä–µ–ª–∏–Ω–∫–æ–≤–∫–∞ (20 –±–∞–ª–ª–æ–≤)
  if (analysis.totalInternalLinks >= 20) {
    score += 20;
  } else {
    issues.push(`–ú–∞–ª–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫: ${analysis.totalInternalLinks}/20`);
    recommendations.push('–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫');
  }
  
  // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å—Å—ã–ª–æ–∫ (15 –±–∞–ª–ª–æ–≤)
  if (analysis.uniqueInternalLinks >= 10) {
    score += 15;
  } else {
    issues.push(`–ú–∞–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${analysis.uniqueInternalLinks}/10`);
    recommendations.push('–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ–ª—å—à–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü');
  }
  
  // –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ (10 –±–∞–ª–ª–æ–≤)
  if (analysis.hasBreadcrumbs) {
    score += 5;
  } else {
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏');
    recommendations.push('–î–æ–±–∞–≤–∏—Ç—å —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
  }
  
  if (analysis.breadcrumbSchema) {
    score += 5;
  } else {
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç BreadcrumbList schema');
    recommendations.push('–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫');
  }
  
  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (10 –±–∞–ª–ª–æ–≤)
  if (analysis.popularSections.length >= 4) {
    score += 10;
  } else {
    issues.push(`–ú–∞–ª–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: ${analysis.popularSections.length}/4`);
    recommendations.push('–í—ã–¥–µ–ª–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —É—Å–ª—É–≥ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
  }
  
  // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã (5 –±–∞–ª–ª–æ–≤)
  if (analysis.hasNavigationSchema) {
    score += 5;
  } else {
    issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ö–µ–º–∞');
    recommendations.push('–î–æ–±–∞–≤–∏—Ç—å SiteNavigationElement schema');
  }
  
  return { score, maxScore, issues, recommendations };
}

function getScoreEmoji(score, maxScore) {
  const percentage = (score / maxScore) * 100;
  if (percentage >= 90) return 'üü¢ –û—Ç–ª–∏—á–Ω–æ';
  if (percentage >= 70) return 'üü° –•–æ—Ä–æ—à–æ';
  if (percentage >= 50) return 'üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ';
  return 'üî¥ –¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è';
}

async function checkSitelinksOptimization() {
  console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫ –Ø–Ω–¥–µ–∫—Å–∞\n');
  console.log('üìã –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º k-lining.ru —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –Ø–Ω–¥–µ–∫—Å–∞:\n');
  
  try {
    console.log('üåê –ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    const response = await makeRequest(SITE_URL);
    
    if (response.statusCode !== 200) {
      throw new Error(`HTTP ${response.statusCode}`);
    }
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...\n');
    
    const analysis = analyzeForSitelinks(response.html);
    const scoring = scoreOptimization(analysis);
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    console.log('=' .repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê');
    console.log('=' .repeat(60));
    
    console.log(`üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${scoring.score}/${scoring.maxScore} ${getScoreEmoji(scoring.score, scoring.maxScore)}`);
    console.log(`üìà –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –±—ã—Å—Ç—Ä—ã–º —Å—Å—ã–ª–∫–∞–º: ${Math.round((scoring.score / scoring.maxScore) * 100)}%\n`);
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:');
    console.log(`   ‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: ${analysis.navLinks.length}`);
    console.log(`   ‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å—Å—ã–ª–æ–∫: ${analysis.totalInternalLinks}`);
    console.log(`   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: ${analysis.uniqueInternalLinks}`);
    console.log(`   ‚Ä¢ –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏: ${analysis.hasBreadcrumbs ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ BreadcrumbList schema: ${analysis.breadcrumbSchema ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: ${analysis.popularSections.length}\n`);
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    if (analysis.navLinks.length > 0) {
      console.log('üß≠ –ì–ª–∞–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è:');
      analysis.navLinks.forEach(link => {
        console.log(`   ‚Ä¢ "${link.text}" ‚Üí ${link.href}`);
      });
      console.log();
    }
    
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    if (analysis.popularSections.length > 0) {
      console.log('üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã (–¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫):');
      analysis.popularSections.forEach(section => {
        console.log(`   ‚Ä¢ "${section.text}" ‚Üí ${section.href}`);
      });
      console.log();
    }
    
    // –ü—Ä–æ–±–ª–µ–º—ã
    if (scoring.issues.length > 0) {
      console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
      scoring.issues.forEach(issue => {
        console.log(`   ‚Ä¢ ${issue}`);
      });
      console.log();
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (scoring.recommendations.length > 0) {
      console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:');
      scoring.recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`);
      });
      console.log();
    }
    
    // –ü—Ä–æ–≥–Ω–æ–∑
    console.log('üîÆ –ü—Ä–æ–≥–Ω–æ–∑ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫:');
    const percentage = (scoring.score / scoring.maxScore) * 100;
    
    if (percentage >= 90) {
      console.log('   üü¢ –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫');
      console.log('   ‚è∞ –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ä–æ–∫: 2-4 –Ω–µ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –¢–û–ü-5');
    } else if (percentage >= 70) {
      console.log('   üü° –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫');
      console.log('   ‚è∞ –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ä–æ–∫: 1-2 –º–µ—Å—è—Ü–∞ –ø–æ—Å–ª–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –¢–û–ü-5');
    } else if (percentage >= 50) {
      console.log('   üü† –°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫');
      console.log('   ‚è∞ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
    } else {
      console.log('   üî¥ –ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Å—Å—ã–ª–æ–∫');
      console.log('   ‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
    }
    
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
    console.log('   2. –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø–æ–ø–∞–¥–∞–Ω–∏–µ–º –≤ –¢–û–ü-5 –Ø–Ω–¥–µ–∫—Å–∞');
    console.log('   3. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä–µ');
    console.log('   4. –ü–æ–≤—Ç–æ—Ä—è—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ');
    
    const timestamp = new Date().toLocaleString('ru-RU');
    console.log(`\n‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${timestamp}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫
checkSitelinksOptimization().catch(console.error);